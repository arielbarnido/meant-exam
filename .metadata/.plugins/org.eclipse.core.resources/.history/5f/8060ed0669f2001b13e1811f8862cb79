package com.meant.delivery.service;

import java.math.BigDecimal;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.meant.delivery.dto.DeliveryCostComputationRule;
import com.meant.delivery.dto.DeliveryCostDto;
import com.meant.delivery.exception.CannotCategorizeparcelException;
import com.meant.delivery.exception.InvalidVoucherException;

@Service
public class DeliveryCostService {

    @Autowired
    Discountservice discountservice;

    public BigDecimal calculateParcelCost(DeliveryCostDto dto)
	    throws JsonMappingException, JsonProcessingException, InvalidVoucherException {
	/*
	 * BigDecimal discountPercentage = new BigDecimal(
	 * discountservice.getDiscountPercentageUsingViaVoucher(dto.
	 * getVoucherCode()));
	 */
	BigDecimal finalCost = BigDecimal.ZERO;
	/*
	 * boolean isRuleToRun = false; for (DeliveryCostComputationRule rule :
	 * DeliveryCostComputationRule.getRules()) {
	 * 
	 * isRuleToRun =
	 * rule.getRuleCondition().test(rule.getGetterFunction().apply(dto)); if
	 * (isRuleToRun) { System.out.print("Running rule condition >>> ");
	 * System.out.println(rule.name()); System.out.println("PARAM >>> " +
	 * rule.getGetterFunction().apply(dto)); finalCost =
	 * rule.getCalculator().apply(rule.getGetterFunction().apply(dto));
	 * break; }
	 * 
	 * }
	 */

	Optional<DeliveryCostComputationRule> rule = DeliveryCostComputationRule.getDeliveryCostRule(dto);
	if (rule.isPresent()) {
	    finalCost = finalCost.setScale(2, BigDecimal.ROUND_HALF_EVEN);
	} else {
	    throw new CannotCategorizeparcelException("Cannot categorize parcel");
	}

	return finalCost;

    }

}
